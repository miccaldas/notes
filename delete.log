2021-08-25T08:40:26.511600+0100 - add - INFO - ['Validate that object is file Python', 'isfile', 'python', 'file', "\n Validating that an object is a file can be useful,\n for example to make sure that in, a loop in a folder,\n you'll iterate only through files.\n This is how you do it:\n ------------------------------------------------------\n import os\n\n os.path.isfile(path)\n ------------------------------------------------------"]
2021-08-25T08:40:26.520241+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note)
                VALUES (%s, %s, %s, %s, %s)
2021-08-25T10:28:27.401462+0100 - add - INFO - ['Join several lists without duplicates', 'python', 'lists', 'duplicates', '\n To join several lists in a no duplicates super-list,\n do the following:\n ----------------------------------------------------\n set1 = set(list1)\n set2 = set(list2)\n set3 = set(list3)\n combined_list = list(set3 - set2 - set1)\n -----------------------------------------------------']
2021-08-25T10:28:27.411336+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note)
                VALUES (%s, %s, %s, %s, %s)
2021-08-25T10:32:27.205246+0100 - add - INFO - ['Select non-duplicates items in MySQL', 'duplicates', 'mysql', 'repeats', ' \n To only get non-repeated results in your\n SQL query, write:\n -----------------------------------------\n SELECT DISTINCT <column> FROM <table>\n -----------------------------------------']
2021-08-25T10:32:27.209212+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note)
                VALUES (%s, %s, %s, %s, %s)
2021-08-25T17:32:40.858863+0100 - search - INFO - dictionary
2021-08-25T17:32:40.866919+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note) AGAINST ('dictionary' )
2021-08-25T17:40:08.761102+0100 - add - INFO - ['Create a dictionary from two lists', 'dictionary', 'lists', 'python', "\n To create a dictionary from two lists, use the following\n dictionary comprehension:\n ---------------------------------------------------------\n list1 = ['Miguel', 'João', 'Mario']\n list2 = [1, 4, 5]\n\n new_dict = {list1[i]: list2[i] for i in range(len(list1))}\n ----------------------------------------------------------\n https://tinyurl.com/yh3kc2sg"]
2021-08-25T17:40:08.765166+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note)
                VALUES (%s, %s, %s, %s, %s)
2021-08-26T23:15:08.037722+0100 - search - INFO - cheatsheet
2021-08-26T23:15:08.045391+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note) AGAINST ('cheatsheet' )
2021-08-26T23:23:45.130819+0100 - add - INFO - ['Validate that object is file', 'isfile', 'python', 'file', "\n Validating that an object is a file can be useful,\n for example to make sure that in, a loop in a folder,\n you'll iterate only through files.\n This is how you do it:\n ------------------------------------------------------\n import os\n\n os.path.isfile(path)\n ------------------------------------------------------", 'http://localhost/notes/pages/html/Validate_that_object_is_file.html']
2021-08-26T23:23:45.135039+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note, url)
                VALUES (%s, %s, %s, %s, %s, %s)
2021-08-26T23:24:07.035953+0100 - delete - INFO - 454
2021-08-26T23:24:07.043029+0100 - delete - INFO -  DELETE FROM notes WHERE ntid = 454
2021-08-26T23:24:56.628925+0100 - add - INFO - ['Join several lists without duplicates', 'python', 'lists', 'duplicates', ' \n  To join several lists in a no duplicates super-list,\n do the following:\n ----------------------------------------------------\n set1 = set(list1)\n set2 = set(list2)\n set3 = set(list3)\n combined_list = list(set3 - set2 - set1)\n -----------------------------------------------------', 'http://localhost/notes/pages/html/Join_several_lists_without_duplicates.html']
2021-08-26T23:24:56.632972+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note, url)
                VALUES (%s, %s, %s, %s, %s, %s)
2021-08-26T23:25:07.343932+0100 - delete - INFO - 455
2021-08-26T23:25:07.351525+0100 - delete - INFO -  DELETE FROM notes WHERE ntid = 455
2021-08-26T23:25:46.552878+0100 - add - INFO - ['Select non-duplicates items in MySQL', 'duplicates', 'mysql', 'repeats', ' \n  To only get non-repeated results in your\n SQL query, write:\n -----------------------------------------\n SELECT DISTINCT <column> FROM <table>\n -----------------------------------------', 'http://localhost/notes/pages/html/Select_non-duplicates_items_in_MySQL.html']
2021-08-26T23:25:46.557197+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note, url)
                VALUES (%s, %s, %s, %s, %s, %s)
2021-08-26T23:25:59.505962+0100 - delete - INFO - 456
2021-08-26T23:25:59.513395+0100 - delete - INFO -  DELETE FROM notes WHERE ntid = 456
2021-08-26T23:26:48.969814+0100 - add - INFO - ['Create a dictionary from two lists', 'dictionary', 'lists', 'python', "\n  To create a dictionary from two lists, use the following\n dictionary comprehension:\n ---------------------------------------------------------\n list1 = ['Miguel', 'João', 'Mario']\n list2 = [1, 4, 5]\n\n new_dict = {list1[i]: list2[i] for i in range(len(list1))}\n ----------------------------------------------------------\n https://tinyurl.com/yh3kc2sg", 'http://localhost/notes/pages/html/Create_a_dictionary_from_two_lists.html']
2021-08-26T23:26:48.973989+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note, url)
                VALUES (%s, %s, %s, %s, %s, %s)
2021-08-26T23:26:59.684025+0100 - delete - INFO - 457
2021-08-26T23:26:59.691350+0100 - delete - INFO -  DELETE FROM notes WHERE ntid = 457
