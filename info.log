2021-08-13T19:04:15.445945+0100 - __main__ - INFO - ('id', ['int', 'AUTO_INCREMENT'])
2021-08-13T19:04:15.446689+0100 - __main__ - INFO - ['id', ['int', 'AUTO_INCREMENT']]
2021-08-13T19:04:15.447079+0100 - __main__ - INFO - ['id']
2021-08-13T19:04:15.447421+0100 - __main__ - INFO - ['int', 'AUTO_INCREMENT']
2021-08-13T19:04:15.447738+0100 - __main__ - INFO - ['int' 'AUTO_INCREMENT']
2021-08-13T19:04:15.448039+0100 - __main__ - INFO - ('title', ['VARCHAR(255)'])
2021-08-13T19:04:15.448342+0100 - __main__ - INFO - ['title', ['VARCHAR(255)']]
2021-08-13T19:04:15.448640+0100 - __main__ - INFO - ['id', "['int' 'AUTO_INCREMENT']", 'title']
2021-08-13T19:04:15.448939+0100 - __main__ - INFO - ['VARCHAR(255)']
2021-08-13T19:04:15.449225+0100 - __main__ - INFO - ['VARCHAR(255)']
2021-08-13T19:04:15.449510+0100 - __main__ - INFO - ('link', ['VARCHAR(255)'])
2021-08-13T19:04:15.449799+0100 - __main__ - INFO - ['link', ['VARCHAR(255)']]
2021-08-13T19:04:15.450113+0100 - __main__ - INFO - ['id', "['int' 'AUTO_INCREMENT']", 'title', "['VARCHAR(255)']", 'link']
2021-08-13T19:04:15.450406+0100 - __main__ - INFO - ['VARCHAR(255)']
2021-08-13T19:04:15.450686+0100 - __main__ - INFO - ['VARCHAR(255)']
2021-08-13T19:04:15.450963+0100 - __main__ - INFO - ['id', "['int' 'AUTO_INCREMENT']", 'title', "['VARCHAR(255)']", 'link', "['VARCHAR(255)']"]
2021-08-13T19:04:15.451257+0100 - __main__ - INFO - ['id', "['int' 'AUTO_INCREMENT']", 'title', "['VARCHAR(255)']", 'link', "['VARCHAR(255)']"]
2021-08-13T19:04:15.451557+0100 - __main__ - INFO - 'id', 'int' 'AUTO_INCREMENT', 'title', 'VARCHAR(255)', 'link', 'VARCHAR(255)'
2021-08-13T19:04:15.451847+0100 - __main__ - INFO - id, int AUTO_INCREMENT, title, VARCHAR(255), link, VARCHAR(255)
2021-08-13T19:04:15.451998+0100 - __main__ - INFO - <callable_iterator object at 0x7f02ddb09ac0>
2021-08-13T19:04:15.452101+0100 - __main__ - INFO - [2, 22, 29, 43, 49]
2021-08-13T19:04:15.452196+0100 - __main__ - INFO - [2, 29, 49]
2021-08-13T19:04:15.452255+0100 - __main__ - INFO - oc1 = 
2021-08-13T19:04:15.452315+0100 - __main__ - INFO - ['i', 'd', ',', ' ', 'i', 'n', 't', ' ', 'A', 'U', 'T', 'O', '_', 'I', 'N', 'C', 'R', 'E', 'M', 'E', 'N', 'T', ',', ' ', 't', 'i', 't', 'l', 'e', ',', ' ', 'V', 'A', 'R', 'C', 'H', 'A', 'R', '(', '2', '5', '5', ')', ',', ' ', 'l', 'i', 'n', 'k', ',', ' ', 'V', 'A', 'R', 'C', 'H', 'A', 'R', '(', '2', '5', '5', ')']
2021-08-13T19:04:15.452405+0100 - __main__ - INFO - id int AUTO_INCREMENT, title VARCHAR(255), link VARCHAR(255)
2021-08-13T19:04:15.452497+0100 - __main__ - INFO - CREATE TABLE apagar(id int AUTO_INCREMENT, title VARCHAR(255), link VARCHAR(255))
2021-08-13T19:18:33.008894+0100 - __main__ - INFO - ('id', ['int', 'AUTO_INCREMENT', 'PRIMARY KEY'])
2021-08-13T19:18:33.009229+0100 - __main__ - INFO - ['id']
2021-08-13T19:18:33.009412+0100 - __main__ - INFO - ['int', 'AUTO_INCREMENT', 'PRIMARY KEY']
2021-08-13T19:18:33.009566+0100 - __main__ - INFO - ['int' 'AUTO_INCREMENT' 'PRIMARY KEY']
2021-08-13T19:18:33.009698+0100 - __main__ - INFO - ('name', ['VARCHAR(255)'])
2021-08-13T19:18:33.009849+0100 - __main__ - INFO - ['id', "['int' 'AUTO_INCREMENT' 'PRIMARY KEY']", 'name']
2021-08-13T19:18:33.009979+0100 - __main__ - INFO - ['VARCHAR(255)']
2021-08-13T19:18:33.010102+0100 - __main__ - INFO - ['VARCHAR(255)']
2021-08-13T19:18:33.010223+0100 - __main__ - INFO - ['id', "['int' 'AUTO_INCREMENT' 'PRIMARY KEY']", 'name', "['VARCHAR(255)']"]
2021-08-13T19:18:33.010351+0100 - __main__ - INFO - ['id', "['int' 'AUTO_INCREMENT' 'PRIMARY KEY']", 'name', "['VARCHAR(255)']"]
2021-08-13T19:18:33.010482+0100 - __main__ - INFO - 'id', 'int' 'AUTO_INCREMENT' 'PRIMARY KEY', 'name', 'VARCHAR(255)'
2021-08-13T19:18:33.010610+0100 - __main__ - INFO - id, int AUTO_INCREMENT PRIMARY KEY, name, VARCHAR(255)
2021-08-13T19:18:33.010832+0100 - __main__ - INFO - <callable_iterator object at 0x7fb1cdc93820>
2021-08-13T19:18:33.010977+0100 - __main__ - INFO - [2, 34, 40]
2021-08-13T19:18:33.011106+0100 - __main__ - INFO - [2, 40]
2021-08-13T19:18:33.011229+0100 - __main__ - INFO - oc1 = 
2021-08-13T19:18:33.011353+0100 - __main__ - INFO - ['i', 'd', ',', ' ', 'i', 'n', 't', ' ', 'A', 'U', 'T', 'O', '_', 'I', 'N', 'C', 'R', 'E', 'M', 'E', 'N', 'T', ' ', 'P', 'R', 'I', 'M', 'A', 'R', 'Y', ' ', 'K', 'E', 'Y', ',', ' ', 'n', 'a', 'm', 'e', ',', ' ', 'V', 'A', 'R', 'C', 'H', 'A', 'R', '(', '2', '5', '5', ')']
2021-08-13T19:18:33.011502+0100 - __main__ - INFO - id int AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255)
2021-08-13T19:18:33.011628+0100 - __main__ - INFO - CREATE TABLE apagar(id int AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255))
2021-08-25T08:40:26.511600+0100 - add - INFO - ['Validate that object is file Python', 'isfile', 'python', 'file', "\n Validating that an object is a file can be useful,\n for example to make sure that in, a loop in a folder,\n you'll iterate only through files.\n This is how you do it:\n ------------------------------------------------------\n import os\n\n os.path.isfile(path)\n ------------------------------------------------------"]
2021-08-25T08:40:26.520241+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note)
                VALUES (%s, %s, %s, %s, %s)
2021-08-25T10:28:27.401462+0100 - add - INFO - ['Join several lists without duplicates', 'python', 'lists', 'duplicates', '\n To join several lists in a no duplicates super-list,\n do the following:\n ----------------------------------------------------\n set1 = set(list1)\n set2 = set(list2)\n set3 = set(list3)\n combined_list = list(set3 - set2 - set1)\n -----------------------------------------------------']
2021-08-25T10:28:27.411336+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note)
                VALUES (%s, %s, %s, %s, %s)
2021-08-25T10:32:27.205246+0100 - add - INFO - ['Select non-duplicates items in MySQL', 'duplicates', 'mysql', 'repeats', ' \n To only get non-repeated results in your\n SQL query, write:\n -----------------------------------------\n SELECT DISTINCT <column> FROM <table>\n -----------------------------------------']
2021-08-25T10:32:27.209212+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note)
                VALUES (%s, %s, %s, %s, %s)
2021-08-25T17:32:40.858863+0100 - search - INFO - dictionary
2021-08-25T17:32:40.866919+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note) AGAINST ('dictionary' )
2021-08-25T17:40:08.761102+0100 - add - INFO - ['Create a dictionary from two lists', 'dictionary', 'lists', 'python', "\n To create a dictionary from two lists, use the following\n dictionary comprehension:\n ---------------------------------------------------------\n list1 = ['Miguel', 'João', 'Mario']\n list2 = [1, 4, 5]\n\n new_dict = {list1[i]: list2[i] for i in range(len(list1))}\n ----------------------------------------------------------\n https://tinyurl.com/yh3kc2sg"]
2021-08-25T17:40:08.765166+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note)
                VALUES (%s, %s, %s, %s, %s)
2021-08-26T23:15:08.037722+0100 - search - INFO - cheatsheet
2021-08-26T23:15:08.045391+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note) AGAINST ('cheatsheet' )
2021-08-26T23:23:45.130819+0100 - add - INFO - ['Validate that object is file', 'isfile', 'python', 'file', "\n Validating that an object is a file can be useful,\n for example to make sure that in, a loop in a folder,\n you'll iterate only through files.\n This is how you do it:\n ------------------------------------------------------\n import os\n\n os.path.isfile(path)\n ------------------------------------------------------", 'http://localhost/notes/pages/html/Validate_that_object_is_file.html']
2021-08-26T23:23:45.135039+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note, url)
                VALUES (%s, %s, %s, %s, %s, %s)
2021-08-26T23:24:07.035953+0100 - delete - INFO - 454
2021-08-26T23:24:07.043029+0100 - delete - INFO -  DELETE FROM notes WHERE ntid = 454
2021-08-26T23:24:56.628925+0100 - add - INFO - ['Join several lists without duplicates', 'python', 'lists', 'duplicates', ' \n  To join several lists in a no duplicates super-list,\n do the following:\n ----------------------------------------------------\n set1 = set(list1)\n set2 = set(list2)\n set3 = set(list3)\n combined_list = list(set3 - set2 - set1)\n -----------------------------------------------------', 'http://localhost/notes/pages/html/Join_several_lists_without_duplicates.html']
2021-08-26T23:24:56.632972+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note, url)
                VALUES (%s, %s, %s, %s, %s, %s)
2021-08-26T23:25:07.343932+0100 - delete - INFO - 455
2021-08-26T23:25:07.351525+0100 - delete - INFO -  DELETE FROM notes WHERE ntid = 455
2021-08-26T23:25:46.552878+0100 - add - INFO - ['Select non-duplicates items in MySQL', 'duplicates', 'mysql', 'repeats', ' \n  To only get non-repeated results in your\n SQL query, write:\n -----------------------------------------\n SELECT DISTINCT <column> FROM <table>\n -----------------------------------------', 'http://localhost/notes/pages/html/Select_non-duplicates_items_in_MySQL.html']
2021-08-26T23:25:46.557197+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note, url)
                VALUES (%s, %s, %s, %s, %s, %s)
2021-08-26T23:25:59.505962+0100 - delete - INFO - 456
2021-08-26T23:25:59.513395+0100 - delete - INFO -  DELETE FROM notes WHERE ntid = 456
2021-08-26T23:26:48.969814+0100 - add - INFO - ['Create a dictionary from two lists', 'dictionary', 'lists', 'python', "\n  To create a dictionary from two lists, use the following\n dictionary comprehension:\n ---------------------------------------------------------\n list1 = ['Miguel', 'João', 'Mario']\n list2 = [1, 4, 5]\n\n new_dict = {list1[i]: list2[i] for i in range(len(list1))}\n ----------------------------------------------------------\n https://tinyurl.com/yh3kc2sg", 'http://localhost/notes/pages/html/Create_a_dictionary_from_two_lists.html']
2021-08-26T23:26:48.973989+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note, url)
                VALUES (%s, %s, %s, %s, %s, %s)
2021-08-26T23:26:59.684025+0100 - delete - INFO - 457
2021-08-26T23:26:59.691350+0100 - delete - INFO -  DELETE FROM notes WHERE ntid = 457
2021-08-26T23:34:07.326289+0100 - add - INFO - ['Get a string up to a certain character in Python', 'python', 'character', 'string', '\n To extract a string up to a chosen character,\n do this:\n ----------------------------------------------\n <string>.split("<character>", "<substitution")\n ----------------------------------------------', 'http://localhost/notes/pages/html/Get_a_string_up_to_a_certain_character_in_Python.html']
2021-08-26T23:34:07.330611+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note, url)
                VALUES (%s, %s, %s, %s, %s, %s)
2021-08-26T23:39:43.358273+0100 - add - INFO - ['Looping through multiple lists', 'python', 'lists', 'zip', "\n Use zip to loop through multiple lists without having\n them be in a:\n    for i in list a:\n        for i in list b:\n situation.\n ------------------------------------------------------\n for x, y in zip(a, b):\n    print x, y\n ------------------------------------------------------\n For a real example see use of this in the file in\n '/srv/http/notes/resources/id_links/build_csv.py'", 'http://localhost/notes/pages/html/Looping_through_multiple_lists.html']
2021-08-26T23:39:43.362369+0100 - add - INFO - INSERT INTO notes (title, k1, k2, k3, note, url)
                VALUES (%s, %s, %s, %s, %s, %s)
2021-08-26T23:48:30.066518+0100 - search - INFO - cheatsheet
2021-08-26T23:48:30.074031+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note) AGAINST ('cheatsheet' )
2021-08-26T23:49:48.340533+0100 - search - INFO - index
2021-08-26T23:49:48.348024+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note) AGAINST ('index' )
2021-08-26T23:57:43.430647+0100 - search - INFO - fulltext
2021-08-26T23:57:43.438278+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note) AGAINST ('fulltext' )
2021-08-26T23:58:01.607793+0100 - search - INFO - full-text
2021-08-26T23:58:01.615329+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note) AGAINST ('full-text' )
2021-08-27T00:00:36.253699+0100 - search - INFO - fulltext
2021-08-27T00:00:36.261115+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note) AGAINST ('fulltext' )
2021-08-27T00:03:05.067825+0100 - search - INFO - fulltext
2021-08-27T00:03:05.075419+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note) AGAINST ('fulltext' )
2021-08-27T00:03:47.870766+0100 - search - INFO - fulltext
2021-08-27T00:03:47.878320+0100 - search - INFO -  SELECT ntid, title, k1, k2, k3, note, url, time FROM notes WHERE MATCH(title, k1, k2, k3, note, url) AGAINST ('fulltext' )
